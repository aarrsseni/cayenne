package org.apache.cayenne.testdo.meaningful.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.apache.cayenne.testdo.meaningful.CalendarEvent;

/**
 * Class _ContactAffliation was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ContactAffliation extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String COMPANY_ID_PK_COLUMN = "COMPANY_ID";
    public static final String CONTACT_ID_PK_COLUMN = "CONTACT_ID";

    public static final StringProperty<String> CONTACT_AFFILIATION_NAME = PropertyFactory.createString("contactAffiliationName", String.class);
    public static final NumericProperty<Integer> CONTACT_ID = PropertyFactory.createNumeric("contactId", Integer.class);
    public static final NumericProperty<Integer> COMPANY_ID = PropertyFactory.createNumeric("companyId", Integer.class);
    public static final ListProperty<CalendarEvent> EVENTS = PropertyFactory.createList("events", CalendarEvent.class);

    protected String contactAffiliationName;
    protected Integer contactId;
    protected Integer companyId;

    protected Object events;

    public void setContactAffiliationName(String contactAffiliationName) {
        beforePropertyWrite("contactAffiliationName", this.contactAffiliationName, contactAffiliationName);
        this.contactAffiliationName = contactAffiliationName;
    }

    public String getContactAffiliationName() {
        beforePropertyRead("contactAffiliationName");
        return this.contactAffiliationName;
    }

    public void setContactId(Integer contactId) {
        beforePropertyWrite("contactId", this.contactId, contactId);
        this.contactId = contactId;
    }

    public Integer getContactId() {
        beforePropertyRead("contactId");
        return this.contactId;
    }

    public void setCompanyId(Integer companyId) {
        beforePropertyWrite("companyId", this.companyId, companyId);
        this.companyId = companyId;
    }

    public Integer getCompanyId() {
        beforePropertyRead("companyId");
        return this.companyId;
    }

    public void addToEvents(CalendarEvent obj) {
        addToManyTarget("events", obj, true);
    }

    public void removeFromEvents(CalendarEvent obj) {
        removeToManyTarget("events", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CalendarEvent> getEvents() {
        return (List<CalendarEvent>)readProperty("events");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "contactAffiliationName":
                return this.contactAffiliationName;
            case "contactId":
                return this.contactId;
            case "companyId":
                return this.companyId;
            case "events":
                return this.events;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "contactAffiliationName":
                this.contactAffiliationName = (String)val;
                break;
            case "contactId":
                this.contactId = (Integer)val;
                break;
            case "companyId":
                this.companyId = (Integer)val;
                break;
            case "events":
                this.events = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.contactAffiliationName);
        out.writeObject(this.contactId);
        out.writeObject(this.companyId);
        out.writeObject(this.events);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.contactAffiliationName = (String)in.readObject();
        this.contactId = (Integer)in.readObject();
        this.companyId = (Integer)in.readObject();
        this.events = in.readObject();
    }

}
