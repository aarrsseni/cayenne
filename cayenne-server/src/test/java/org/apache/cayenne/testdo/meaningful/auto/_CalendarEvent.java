package org.apache.cayenne.testdo.meaningful.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.apache.cayenne.testdo.meaningful.ContactAffliation;

/**
 * Class _CalendarEvent was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _CalendarEvent extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> EVENT_NAME = PropertyFactory.createString("eventName", String.class);
    public static final EntityProperty<ContactAffliation> TO_AFFILIATION = PropertyFactory.createEntity("toAffiliation", ContactAffliation.class);

    protected String eventName;

    protected Object toAffiliation;

    public void setEventName(String eventName) {
        beforePropertyWrite("eventName", this.eventName, eventName);
        this.eventName = eventName;
    }

    public String getEventName() {
        beforePropertyRead("eventName");
        return this.eventName;
    }

    public void setToAffiliation(ContactAffliation toAffiliation) {
        setToOneTarget("toAffiliation", toAffiliation, true);
    }

    public ContactAffliation getToAffiliation() {
        return (ContactAffliation)readProperty("toAffiliation");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "eventName":
                return this.eventName;
            case "toAffiliation":
                return this.toAffiliation;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "eventName":
                this.eventName = (String)val;
                break;
            case "toAffiliation":
                this.toAffiliation = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.eventName);
        out.writeObject(this.toAffiliation);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.eventName = (String)in.readObject();
        this.toAffiliation = in.readObject();
    }

}
