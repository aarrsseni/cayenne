/*****************************************************************
 *   Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 ****************************************************************/

package org.apache.cayenne.testdo.numeric_types.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;

/**
 * Class _NumberTest was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _NumberTest extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final NumericProperty<Number> SMALLINT_ATTR = PropertyFactory.createNumeric("smallintAttr", Number.class);
    public static final NumericProperty<Number> DOUBLE_ATTR = PropertyFactory.createNumeric("doubleAttr", Number.class);
    public static final NumericProperty<Number> NUMERIC_ATTR = PropertyFactory.createNumeric("numericAttr", Number.class);
    public static final NumericProperty<Number> TINYINT_ATTR = PropertyFactory.createNumeric("tinyintAttr", Number.class);
    public static final NumericProperty<Number> REAL_ATTR = PropertyFactory.createNumeric("realAttr", Number.class);

    protected Number smallintAttr;
    protected Number doubleAttr;
    protected Number numericAttr;
    protected Number tinyintAttr;
    protected Number realAttr;


    public void setSmallintAttr(Number smallintAttr) {
        beforePropertyWrite("smallintAttr", this.smallintAttr, smallintAttr);
        this.smallintAttr = smallintAttr;
    }

    public Number getSmallintAttr() {
        beforePropertyRead("smallintAttr");
        return this.smallintAttr;
    }

    public void setDoubleAttr(Number doubleAttr) {
        beforePropertyWrite("doubleAttr", this.doubleAttr, doubleAttr);
        this.doubleAttr = doubleAttr;
    }

    public Number getDoubleAttr() {
        beforePropertyRead("doubleAttr");
        return this.doubleAttr;
    }

    public void setNumericAttr(Number numericAttr) {
        beforePropertyWrite("numericAttr", this.numericAttr, numericAttr);
        this.numericAttr = numericAttr;
    }

    public Number getNumericAttr() {
        beforePropertyRead("numericAttr");
        return this.numericAttr;
    }

    public void setTinyintAttr(Number tinyintAttr) {
        beforePropertyWrite("tinyintAttr", this.tinyintAttr, tinyintAttr);
        this.tinyintAttr = tinyintAttr;
    }

    public Number getTinyintAttr() {
        beforePropertyRead("tinyintAttr");
        return this.tinyintAttr;
    }

    public void setRealAttr(Number realAttr) {
        beforePropertyWrite("realAttr", this.realAttr, realAttr);
        this.realAttr = realAttr;
    }

    public Number getRealAttr() {
        beforePropertyRead("realAttr");
        return this.realAttr;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "smallintAttr":
                return this.smallintAttr;
            case "doubleAttr":
                return this.doubleAttr;
            case "numericAttr":
                return this.numericAttr;
            case "tinyintAttr":
                return this.tinyintAttr;
            case "realAttr":
                return this.realAttr;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "smallintAttr":
                this.smallintAttr = (Number)val;
                break;
            case "doubleAttr":
                this.doubleAttr = (Number)val;
                break;
            case "numericAttr":
                this.numericAttr = (Number)val;
                break;
            case "tinyintAttr":
                this.tinyintAttr = (Number)val;
                break;
            case "realAttr":
                this.realAttr = (Number)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.smallintAttr);
        out.writeObject(this.doubleAttr);
        out.writeObject(this.numericAttr);
        out.writeObject(this.tinyintAttr);
        out.writeObject(this.realAttr);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.smallintAttr = (Number)in.readObject();
        this.doubleAttr = (Number)in.readObject();
        this.numericAttr = (Number)in.readObject();
        this.tinyintAttr = (Number)in.readObject();
        this.realAttr = (Number)in.readObject();
    }

}
